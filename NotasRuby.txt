Credeciais Problema Atom e Git-Plus:
  - https://github.com/akonwi/git-plus/issues/224
  - https://github.com/Microsoft/Git-Credential-Manager-for-Windows
  - Teste
Git commands:
  - git clean -df > Utilizado quando criou novos arquivos e que deletalos sem realizar o commit.

Sobre a Linguagem:
  - Inferencia de Tipos: onde o valor atribuido a uma variavel é reconhecido pelo interpretador.
  - Tipagem Forte e Dinamica: em php na realização de uma operação de numero inteiro com string (teste = 10; teste01 = "2") é realizado o calculo
    ja em ruby é mostrado um erro. Mas no ruby pode estar atribuindo tipos diferentes em uma variavel ja atribuida uma outro tipo.
  - O Ruby é uma linguagem interpretada, não necessita de um processo de compilação.
  -  O Ruby Trabalha com Classes Abertas, o que signifca que voce pode instanciar uma classe e modificar do seu jeito.
      EX:
          class String
            def plural
              "#{self}s"
            end
          end

          puts "caneta".plural
  - Cases de sucesso Rails: Shopfy, MailChimp, Grupon; os dois primeiros sao SaaS
  - Pode haver a colocação do caracter %_ para separa pontos de milhar nao alterando o tipo da variavel. (serve basicamente para uma melhor legibilidade)
  - a separação de casas decimais é feita com (.).
  - Quando ha necessidade da concatenação de string é feita a interpolação #{nome_variavel}. So e possivel fazer a interpolação com aspas duplas.
  - Diferenças entre aspas duplas e aspas simples, é que durante o uso de aspas duplas o iterpretador realiza a analise lexica para verificação se a uma interpolação diferente do uso das aspas simples.
  - O Ruby pode omitir os parenteses da estrutura de condição if o que é definido com o termo syntax sugar com o intuito de deixa la mais legivel.
    se a estrutura if for unica pode-se deixa la mais enxuta. [ex: puts nome if idade > 18].
  - Para representar algum valor tido como vazio na linguagem ruby utilizamos o nil, palavra reservada que pode estar sendo atribuido a uma variavel.
  - As variaveis quando possuem o valor nil assume automaticamente o valor true quando presente em uma condição if ou unless.
  - Loops em Ruby:
    [ ex FOR:
    for numero in (1..100)
      puts "Numero #{numero}"
    end],
    [ex WHILE:
    numero = 0
    while nome <= 100
      puts "Numero: #{numero}"
      numero++
    end {termina seu loop quando a condição é falsa}],
    [ex UNTIL:
    numero = 0
    until numero == 100
      puts "Numero: #{numero}"
      numero += 1
    end {termina seu loop quando a condição é verdadeira}
    ]
  - Notações de escape Ruby, podem ser feitas com "\'" ou com o escape semelhante ao perl "%{}, [], <>, ~~"
    (podem ser utilizados deste tipo), pode haver o escape de string com a interpolação.
    [Classe
      - "Unidar dados e a Manipulação dos mesmo, encapsulando o acesso (Conceito OO)"
      -  criar uma instacia de um objeto em Ruby
        (nome_variavel) = (nome_objeto).new
      - Para passar as informações referente a instância é criado o metodo initialize na classe que pode ser omitido o parenteses
        ou nao quando estver sendo instânciado. Quando criado uma classe é criado por default o metodo initialize
      - A aridade é um fator essencial no Ruby, a quantidade de parametros tem que ser igual a do metodo quando criado.
      - O Ruby não suporta a sobrecarga, isso por que o interpretador sempre considera o ultimo metodo (quando ha sobrecarga)
        definido na classe.
        {ex NAO FUNCIONA
          classe Livro
            def initialize(nome, isbn, numero_paginas)
            end

            def initialize(nome, numero_paginas)
            end
          end
        }
        #Para isso pe feito o uso de argumentos padrao
        {ex FUNCIONA
          classe Livro
            def initialize(nome, isbn = "1", numero_paginas)
            end
          end

          web_responsivo = Livro.new "Otavio", 240 # ORuby consegueentender que o valor atribuido sera em numero_pagina.
        }
      - O Ruby possui 3 tipos de argumentos: Obrigatorio, padrao e opcional(Mais adiante)
      - Carregando Arquivo Ruby:
        utilizando o metodo da classe kernel 'require' junto com o nome do arquivo .rb, se o parametro nao for o caminho absoluto
        do arquivo .rb, entao, sera feito a busca em diretorios definidos na contante $LOAD_PATH(local onde se encontra os arquivos rb do core do Ruby)
        duas formas podem ser usadas para carregar:
          * adicionar a constante $LOAD_PATH << "caminho relativo do projeto 'loja_virtual/lib'" e quando for carregado ficara require 'livro'
          * a segunda é tida como a melhor opção, é utilizar o caminho absoluto fazendo uso do metodo expand_path da classe File
    ]

  Ruby Metodos:
    - .class: retorna o tipo da variavel.
    - .nill?: verifica se variavel é nula, retorna true se sim.
    - (I Know! -.-") if not ou unless
    - .expand_path("caminho_relativo") # Metodo da Classe File
